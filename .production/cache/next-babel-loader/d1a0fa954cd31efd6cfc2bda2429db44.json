{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.RootProvider = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _api = _interopRequireDefault(require(\"../api\"));\n\nvar _router = require(\"next/router\");\n\nvar _reducers = require(\"./reducers\");\n\nvar _actions = require(\"./actions\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar __jsx = _react.default.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst w = {\n  device: \"pc\"\n};\n\nif (false) {\n  w.device = window.innerWidth > 768 ? \"pc\" : \"mobile\";\n  document.body.classList.add(w.device);\n} // common global context\n\n\nconst RootContext = (0, _react.createContext)({});\n\nconst finalizeStore = async ({\n  store,\n  actions,\n  reducer\n}, single, {\n  loginStatus,\n  logout\n}, signal) => {\n  const {\n    reduce\n  } = single || {};\n  if (!reduce) return false;\n\n  const actionExist = _objectSpread({}, actions[reduce] || {}, {}, single);\n\n  if (!actionExist.action || actionExist.api === false) {\n    return reducer(store, {\n      reduce,\n      data: actionExist.data || false\n    });\n  }\n\n  return reducer(store, {\n    reduce,\n    data: await (0, _api.default)(actionExist, signal, {\n      logout,\n      loginStatus\n    })\n  }, actionExist);\n};\n\nconst setStoreReducer = (state, data) => {\n  return _objectSpread({}, state, {}, data);\n}; // Context as global app store\n\n\nconst RootProvider = (0, _router.withRouter)(props => {\n  const {\n    loginStatus,\n    logout,\n    children\n  } = props;\n  const {\n    0: store,\n    1: setStore\n  } = (0, _react.useReducer)(setStoreReducer, _reducers.root_store_initial_state);\n\n  const actioner = async apiParams => {\n    const updater = {\n      api: apiParams,\n      toState: {},\n      signals: []\n    };\n    /** ARRAY:   if type is array we are able to make several\n     *           api request, reduce them, and then assign all data at once to the state\n     *  OBJECT:  single api request, reduce and state setter\n     */\n\n    if (updater.api instanceof Array) {\n      updater.toState = Object.assign({}, (await Promise.all(updater.api.map(async (single, x) => {\n        updater.signals[x] = new window.AbortController();\n        return await finalizeStore({\n          store,\n          actions: _actions.rootActions,\n          reducer: _reducers.root_store_reducer\n        }, single, {\n          loginStatus,\n          logout\n        }, updater.signals[x]);\n      }))).reduce((p, n) => Object.assign({}, p, n), {}));\n    } else {\n      updater.signals[0] = new window.AbortController();\n      updater.toState = await finalizeStore({\n        store,\n        actions: _actions.rootActions,\n        reducer: _reducers.root_store_reducer\n      }, apiParams, {\n        loginStatus,\n        logout\n      }, updater.signals[0]);\n    }\n\n    if (updater.toState) {\n      if (apiParams.set !== false) {\n        setStore(updater.toState);\n        return updater.toState;\n      } else {\n        return {\n          data: updater.toState,\n          set: setStore\n        };\n      }\n    }\n\n    return function clean() {\n      updater.signals.map(s => {\n        s.abort();\n      });\n    };\n  };\n\n  const {\n    0: device,\n    1: _device\n  } = (0, _react.useState)(\"pc\");\n\n  const getScreenState = e => {\n    e.preventDefault();\n\n    _device(s => {\n      const canSet = s === \"mobile\" && window.innerWidth > 768 ? \"pc\" : s === \"pc\" && window.innerWidth <= 768 ? \"mobile\" : false;\n\n      if (canSet) {\n        document.body.classList.remove(canSet === \"mobile\" ? \"pc\" : \"mobile\");\n        document.body.classList.add(canSet);\n      }\n\n      return canSet || s;\n    });\n  };\n\n  (0, _react.useEffect)(() => {\n    if (false) {\n      const dev = window.innerWidth > 768 ? \"pc\" : \"mobile\";\n\n      _device(dev);\n\n      document.body.classList.add(dev);\n      window.addEventListener(\"resize\", getScreenState);\n    }\n  }, []);\n\n  const api = (data, signal = false) => {\n    return (0, _api.default)(data, signal, {\n      logout,\n      loginStatus: state.loginStatus\n    });\n  };\n\n  return __jsx(RootContext.Provider, {\n    value: {\n      store,\n      actioner,\n      device,\n      setStore,\n      api\n    }\n  }, children);\n});\nexports.RootProvider = RootProvider;\nvar _default = RootContext;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}